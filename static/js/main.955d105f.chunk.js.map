{"version":3,"sources":["../../src/utils/constants.js","../../src/components/Digit/Digit.js","../../src/hooks/useFocus.js","../../src/components/DigitInputs/DigitInputs.js","components/ExampleOne.js","components/ExampleTwo.js","components/GithubRibbon.js","App.js","index.js"],"names":["REGEXS","DIGITS","KEY_CODES","Digit","memo","className","index","value","onDigitChange","changeFocus","focused","hidden","digitRef","isFocused","ref","useRef","useEffect","useFocus","handleKeyUpPress","event","includes","styles","name","type","autoComplete","maxLength","onChange","pattern","inputMode","onKeyPress","onKeyUp","onFocus","prevProps","nextProps","DigitInputs","onDigitsChange","children","useState","values","setValues","focusedIndex","setFocusedIndex","asString","Object","asNumber","Number","asObject","handleDigitChange","keyCode","isNaN","digits","cloneElement","digit","ExampleOne","valueAsString","setValueAsString","valueAsNumber","setValueAsNumber","valueAsObject","setValueAsObject","setHidden","htmlFor","checked","target","JSON","stringify","PropTypes","string","ExampleTwo","GithubRibbon","href","style","position","top","right","width","height","src","alt","data-recalc-dims","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.955d105f.chunk.js","sourcesContent":["export const REGEXS = {\n  DIGITS: /[0-9]/\n}\n\nexport const KEY_CODES = {\n  BACKSPACE: 8,\n  ARROW_LEFT: 37,\n  ARROW_RIGHT: 39\n}\n","import React, { memo } from 'react'\nimport useFocus from '../../hooks/useFocus'\nimport { REGEXS, KEY_CODES } from '../../utils/constants'\nimport styles from './Digit.module.css'\nimport PropTypes from 'prop-types'\n\nfunction areEqual(prevProps, nextProps) {\n  return (\n    prevProps.value === nextProps.value &&\n    prevProps.focused === nextProps.focused\n  )\n}\n\nexport const Digit = memo(\n  ({\n    className,\n    index,\n    value,\n    onDigitChange,\n    changeFocus,\n    focused,\n    hidden\n  }) => {\n    const digitRef = useFocus(focused)\n\n    const handleChange = (event) => {\n      onDigitChange(index, event.target.value)\n    }\n\n    const handleKeyUpPress = (event) => {\n      const { ARROW_LEFT, ARROW_RIGHT } = KEY_CODES\n\n      if ([ARROW_LEFT, ARROW_RIGHT].includes(event.keyCode)) {\n        changeFocus(event.keyCode)\n      }\n\n      if (!REGEXS.DIGITS.test(event.key)) {\n        event.preventDefault()\n      }\n    }\n\n    const handleFocus = (event) => {\n      event.target.setSelectionRange(0, 1)\n    }\n\n    return (\n      <input\n        className={className || styles.digit}\n        name={`digit-index-${index}`}\n        type={hidden ? 'password' : 'text'}\n        autoComplete='off'\n        value={value || ''}\n        ref={digitRef}\n        maxLength={1}\n        onChange={handleChange}\n        pattern='[0-9]*'\n        inputMode='tel'\n        onKeyPress={handleKeyUpPress}\n        onKeyUp={handleKeyUpPress}\n        onFocus={handleFocus}\n      />\n    )\n  },\n  areEqual\n)\n\nDigit.propTypes = {\n  className: PropTypes.string\n}\n","import { useEffect, useRef } from 'react'\n\nexport default function useFocus(isFocused) {\n  const ref = useRef(null)\n\n  useEffect(() => {\n    isFocused && ref.current.focus()\n  })\n\n  return ref\n}\n","import React, { useState, useEffect, Children, cloneElement } from 'react'\nimport PropTypes from 'prop-types'\nimport { Digit } from '../Digit/Digit'\nimport { REGEXS, KEY_CODES } from '../../utils/constants'\n\nexport function DigitInputs({ className, onDigitsChange, hidden, children }) {\n  const [values, setValues] = useState({})\n  const [focusedIndex, setFocusedIndex] = useState(null)\n\n  useEffect(() => {\n    const asString = Object.values(values).join('')\n    const asNumber = Number(asString)\n    onDigitsChange({\n      asNumber,\n      asString,\n      asObject: values\n    })\n  }, [values])\n\n  const handleDigitChange = (index, value) => {\n    setValues((prevState) => ({\n      ...prevState,\n      [index]: value\n    }))\n\n    setFocusedIndex(REGEXS.DIGITS.test(value) ? index + 1 : null)\n  }\n\n  const changeFocus = (keyCode) => {\n    if (isNaN(focusedIndex)) return\n    if (keyCode === KEY_CODES.ARROW_LEFT) setFocusedIndex(focusedIndex - 1)\n    if (keyCode === KEY_CODES.ARROW_RIGHT) setFocusedIndex(focusedIndex + 1)\n  }\n\n  const digits = Children.map(children, (digit, index) =>\n    cloneElement(digit, {\n      index: index,\n      value: values[index] || null,\n      focused: index === focusedIndex,\n      hidden: hidden || false,\n      onDigitChange: handleDigitChange,\n      changeFocus\n    })\n  )\n\n  return <div className={className}>{digits}</div>\n}\n\nDigitInputs.propTypes = {\n  onDigitsChange: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  hidden: PropTypes.bool,\n  children: PropTypes.arrayOf(\n    PropTypes.shape({\n      type: PropTypes.oneOf([Digit])\n    })\n  )\n}\n","import React, { useState } from 'react'\nimport { DigitInputs, Digit } from 'digitinputs-react'\n\nexport default function ExampleOne() {\n  const [valueAsString, setValueAsString] = useState('')\n  const [valueAsNumber, setValueAsNumber] = useState(null)\n  const [valueAsObject, setValueAsObject] = useState({})\n  const [hidden, setHidden] = useState(false)\n\n  const handleDigitInputsChange = (value) => {\n    setValueAsObject(value.asObject)\n    setValueAsString(value.asString)\n    setValueAsNumber(value.asNumber)\n  }\n\n  const handleCheckChange = (event) => {\n    setHidden(event.target.checked)\n  }\n\n  return (\n    <div className='example-one'>\n      <form autoComplete='new-password'>\n        <div className='input-field'>\n          <label>Please enter the code</label>\n          <DigitInputs\n            className='digitinputs'\n            hidden={hidden}\n            onDigitsChange={handleDigitInputsChange}\n          >\n            <Digit />\n            <Digit />\n            <Digit />\n            <Digit />\n            <Digit />\n            <Digit />\n          </DigitInputs>\n        </div>\n        <div className='input-field'>\n          <label htmlFor='isHidden'>\n            Hide\n            <input\n              type='checkbox'\n              name='isHidden'\n              checked={hidden}\n              onChange={handleCheckChange}\n            />\n          </label>\n        </div>\n      </form>\n      <p>Value as string: {valueAsString}</p>\n      <p>Value as number: {valueAsNumber}</p>\n      <p>value as Object: {JSON.stringify(valueAsObject)}</p>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { DigitInputs, Digit } from 'digitinputs-react'\nimport './ExampleTwo.css'\n\nexport default function ExampleTwo() {\n  const [valueAsString, setValueAsString] = useState('')\n  const [valueAsNumber, setValueAsNumber] = useState(null)\n  const [valueAsObject, setValueAsObject] = useState({})\n  const [hidden, setHidden] = useState(false)\n\n  const handleDigitInputsChange = (value) => {\n    setValueAsObject(value.asObject)\n    setValueAsString(value.asString)\n    setValueAsNumber(value.asNumber)\n  }\n\n  const handleCheckChange = (event) => {\n    setHidden(event.target.checked)\n  }\n\n  return (\n    <div className='example-one'>\n      <form autoComplete='new-password'>\n        <div className='input-field'>\n          <label>Please enter the code</label>\n          <DigitInputs\n            className='custom-digitinputs'\n            hidden={hidden}\n            onDigitsChange={handleDigitInputsChange}\n          >\n            <Digit className='digit-one' />\n            <Digit className='digit-two' />\n            <Digit className='digit-three' />\n            <Digit className='digit-four' />\n            <Digit className='digit-five' />\n            <Digit className='digit-six' />\n          </DigitInputs>\n        </div>\n        <div className='input-field'>\n          <label htmlFor='isHidden'>\n            Hide\n            <input\n              type='checkbox'\n              name='isHidden'\n              checked={hidden}\n              onChange={handleCheckChange}\n            />\n          </label>\n        </div>\n      </form>\n      <p>Value as string: {valueAsString}</p>\n      <p>Value as number: {valueAsNumber}</p>\n      <p>value as Object: {JSON.stringify(valueAsObject)}</p>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function GithubRibbon() {\n  return (\n    <a\n      href='https://github.com/yyalim/digitinputs-react'\n      style={{ position: 'absolute', top: 0, right: 0 }}\n    >\n      <img\n        width='149'\n        height='149'\n        src='https://github.blog/wp-content/uploads/2008/12/forkme_right_green_007200.png?resize=149%2C149'\n        className='attachment-full size-full'\n        alt='Fork me on GitHub'\n        data-recalc-dims='1'\n      />\n    </a>\n  )\n}\n","import React from 'react'\n\nimport 'digitinputs-react/dist/index.css'\n\nimport ExampleOne from './components/ExampleOne'\nimport ExampleTwo from './components/ExampleTwo'\nimport GithubRibbon from './components/GithubRibbon'\n\nconst App = () => {\n  return (\n    <div className='example-app'>\n      <GithubRibbon />\n      <div className='description'>\n        <h1>digitinputs-react</h1>\n        <p>\n          A react component for digit inputs. It might be very useful to get SMS\n          codes from user on two factor authentications and in many other\n          scenarios when you need get an numerical input from user digit by\n          digit.\n        </p>\n        <p>\n          <a href='https://github.com/yyalim/digitinputs-react'>Github</a>\n        </p>\n        <p>\n          <a href='https://www.npmjs.com/package/digitinputs-react'>NPM</a>\n        </p>\n      </div>\n      <div className='examples'>\n        <h2>Examples:</h2>\n        <div className='example'>\n          <h3>With default styles</h3>\n          <p>You can use it with default styling</p>\n          <ExampleOne />\n        </div>\n        <div className='example'>\n          <h3>Custom styles</h3>\n          <p>Or you can override class names and use your own style</p>\n          <ExampleTwo />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}